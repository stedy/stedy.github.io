<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zach Stednick]]></title>
  <link href="http://stedy.github.io/atom.xml" rel="self"/>
  <link href="http://stedy.github.io/"/>
  <updated>2015-09-02T10:00:32-07:00</updated>
  <id>http://stedy.github.io/</id>
  <author>
    <name><![CDATA[Zach Stednick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fremont bridge opening times]]></title>
    <link href="http://stedy.github.io/blog/2015/09/02/fremont-bridge-opening-times/"/>
    <updated>2015-09-02T09:54:03-07:00</updated>
    <id>http://stedy.github.io/blog/2015/09/02/fremont-bridge-opening-times</id>
    <content type="html"><![CDATA[<p>I bike across the Fremont Bridge twice a day which Wikipedia
<a href="https://en.wikipedia.org/wiki/Fremont_Bridge_%28Seattle%29">claims</a> is
the most frequently opened bridge in the United States.
This claim is uncited and while it may be true, due to <a href="http://www.ecfr.gov/cgi-bin/text-idx?SID=cfc62d83403b960e08f5038e67b9ecd1&amp;node=33:1.0.1.10.61.1.65.3&amp;rgn=div8">Federal Maritime
Law</a>
boats get precedence for bridge opening with the exceptions of rush
hours which in Seattle are M-F 7-9 AM and 4-6 PM. I often get to the
bridge on my bike around 9 AM in the morning and 6 PM in the evening and
it
always felt like the bridge opens right at 9 and 6 PM on the dot. I
could manually time the bridge openings but that seemed like too much
effort.</p>

<p>Recently, a <a href="https://twitter.com/brotherslogsdon">friend</a> notified me about the twitter account of <a href="https://twitter.com/sdotbridges">Seattle DOT
bridges</a> which is basically a bot that
posts bridge openings and closings such as:</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">The
Fremont Bridge has closed to traffic - 9:43:03 AM</p>&mdash;
seattleDOTbridges (@SDOTbridges) <a
href="https://twitter.com/SDOTbridges/status/639116352200970240">September
2, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js"
charset="utf-8"></script>


<p>I used the excellent <a href="https://github.com/geoffjentry/twitteR">twitteR</a>
to scrape tweets from Seattle DOT bridges for the past month to test how
accurate my assumption was. From this, I pulled
the first crossing post morning rush hour and evening rush hour for
weekdays only.</p>

<p><img src="http://zachstednick.com/Fremont_bridge_openings.png"></p>

<p>The mean opening time post-morning rush was 9:28 AM and the mean opening
time post-evening rush was 9:25 which means that my assumptions were
pretty off and I should not feel so stressed to arrive at the bridge
before 9 AM and 6 PM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch collection of park boundaries with Open Street Map]]></title>
    <link href="http://stedy.github.io/blog/2015/08/16/batch-collection-of-park-boundaries-with-open-street-map/"/>
    <updated>2015-08-16T12:16:39-07:00</updated>
    <id>http://stedy.github.io/blog/2015/08/16/batch-collection-of-park-boundaries-with-open-street-map</id>
    <content type="html"><![CDATA[<p>Open Street Map (OSM) is, simply put, a freely available and editable
map of the <a href="http://www.openstreetmap.org">world</a>. I have been interested in
improving the availability of <a href="https://github.com/openseattle/seattle-boundaries">boundaries in Seattle</a> and wanted
to add park boundaries to this list as well. It was easy to look up
boundaries on OSM, for example <a href="http://www.openstreetmap.org/way/53600070">Salmon Bay Park</a> shows the various nodes that
make up its boundaries. But I had struggled with how to automate this
search since at last count Seattle had over <a href="http://www.seattle.gov/parks/listall.asp">400
parks</a>. After months of
struggling with the OSM API, I fortuitously stumbed
across the following tweet:</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Two
map data posts:&#10;&#10;Historic map warping for <a
href="https://twitter.com/somethingmodern">@somethingmodern</a> <a
href="http://t.co/7POw8PNBXI">http://t.co/7POw8PNBXI</a>&#10;&#10;Data
from OSM for <a href="https://twitter.com/alignedleft">@alignedleft</a>
<a href="http://t.co/DqxAuyPunh">http://t.co/DqxAuyPunh</a></p>&mdash;
Michal Migurski (@michalmigurski) <a
href="https://twitter.com/michalmigurski/status/632613151721193472">August
15, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js"
charset="utf-8"></script>


<p>This tweet lead me to Mapzen which provides a service called <a href="https://mapzen.com/data/metro-extracts/">Metro
Extracts</a> which provides
datasets from OSM on a weekly basis. I downloaded the OSM2PGSQL GeoJSON
file for Seattle which provided me files for Line, Point, and
Polygon geometries. I then used
<a href="https://www.npmjs.com/package/ogr2ogr">ogr2ogr</a> to filter for parks
only with the command</p>

<p><code>ogr2ogr select 'osm_id, name, geometry' where "leisure = 'park'"</code></p>

<p>This produced a GeoJSON file that looked like this:</p>

<script src="https://gist.github.com/stedy/d11ab757400fd5375796.js"></script>


<p>Obviously, more filtering needed to be done. Since many of these parks
were not in Seattle, I used the Nominatim API to search for each park
based on the OSM ID number. For example, the above mentioned park Salmon
Bay Park returns a nicely formatted <a href="http://nominatim.openstreetmap.org/lookup?osm_ids=W53600070">XML
file</a> which
I just filtered based on city.</p>

<p>Even after this there were still parks that were wrongly labelled as
being in Seattle. I loaded the file into R and subset based on OSM ID
and then used
<a href="https://cran.r-project.org/web/packages/rgdal/">rgdal</a> to write the
final result out as a GeoJSON file.</p>

<script src="https://gist.github.com/stedy/1ef0a40bc8c29f7412a0.js"></script>


<p>The take home lesson for me is that OSM is an excellent service but as
with any publicly annotated dataset be prepared to invest some time
into cleaning and validating the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update on restaurant changes]]></title>
    <link href="http://stedy.github.io/blog/2015/07/23/update-on-restaurant-changes/"/>
    <updated>2015-07-23T15:31:31-07:00</updated>
    <id>http://stedy.github.io/blog/2015/07/23/update-on-restaurant-changes</id>
    <content type="html"><![CDATA[<p>I have been tracking restaurant openings via the <a href="http://www.seattle.gov/licenses/find-a-business">City of Seattle
Business Finder</a> since
the beginning of this year and am reporting those changes at <a href="http://seattlerestaurantchanges.com/">Seattle
Restaurant Changes</a>. Recently I
put up a <a href="http://seattlerestaurantchanges.com/heatmap.html">heatmap</a>
showing changes by neighborhood. This heatmap shows a current snaphot of
the changes which made me curious about changes by restaurant type over the course of
the year.</p>

<iframe width="980" height="520" src="http://zachstednick.com/net_restaurant_changes.html"></iframe>


<p>A few notes:</p>

<ul>
<li><p>The City of Seattle uses North American Industry Classification System
codes <a href="http://www.census.gov/eos/www/naics/">(NAICS)</a> to track
restaurants. I then use the date of permit issuance as a proxy for a
restaurant opening and date of permit revocation as a proxy for closing.</p></li>
<li><p>A Full Service Restaurant as defined by NAICS is &ldquo;establishments primarily engaged in providing food services to patrons who order and are served while seated (i.e., waiter/waitress service) and pay after eating&rdquo;</p></li>
<li><p>I realized that not that many breweries would be opening up but who
doesn&rsquo;t want more breweries in town?</p></li>
<li><p>I was not expecting Full Service Restaurants to take off as much as
they did, especially since Limited Service Restaurants seem to be
declining.</p></li>
</ul>


<p>I will try to post another update on this in December, that is unless I decide to open up a food truck of my own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Felix Factor]]></title>
    <link href="http://stedy.github.io/blog/2015/05/30/the-felix-factor/"/>
    <updated>2015-05-30T16:12:37-07:00</updated>
    <id>http://stedy.github.io/blog/2015/05/30/the-felix-factor</id>
    <content type="html"><![CDATA[<p>I was listening to the Jonah Keri
<a href="http://espn.go.com/espnradio/grantland/player?id=12957030">podcast</a> and
he and Ben Gibbard were talking about the Mariners, specifically <a href="http://m.mlb.com/player/433587/felix-hernandez/2015/career/R/pitching/MLB">Felix
Hernandez</a>.
One of the points Gibbard made was that Hernandez is so outstanding that
he will be remembered and that people should try to see him pitch in
person. This made me wonder, did Felix Hernandez have an impact on home
ticket sales for the Mariners in 2014?</p>

<p>I was able to get all the data from some of the nicely formatted box
score data that <a href="http://gd2.mlb.com/components/game/mlb/year_2014/">MLB provides</a>. I initially tried to look at the data over the course of the year but attendance was so variable (which made for an extremely confusing plot) that I just ended up making a box and whiskers plot and ignored the date element:</p>

<p><img src="http://zachstednick.com/felix_factor.png"></p>

<p>Conclusion: Hernandez was not that strong of a driver of ticket sales
which is great news if you are hoping to see him pitching in person.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seattle Restaurant Changes]]></title>
    <link href="http://stedy.github.io/blog/2015/04/17/seattle-restaurant-changes/"/>
    <updated>2015-04-17T10:51:18-07:00</updated>
    <id>http://stedy.github.io/blog/2015/04/17/seattle-restaurant-changes</id>
    <content type="html"><![CDATA[<p>Seattle construction is currently booming and I was interested in how
that
reflected in the local restaurant scene. There are many food blogs and
local news sites that cover openings and closings, but I found it too
difficult to parse these in a regular manner. Fortunately I was able to
use data from the <a href="http://www.seattle.gov/licenses/find-a-business">City of Seattle business
finder</a> and used the
restaurant classification or
<a href="https://en.wikipedia.org/wiki/NAICS">NAICS</a> code as a proxy. Using the
data in this manner makes an assumption that a restaurant will no longer
have a business licence after it closes.
I&rsquo;m not sure how accurate this is but I figured it was as accurate as I
could get short of hiring people on Mechanical Turk to phone every
restaurant every week and ask if the restaurant is still open. To map each
restaurant to a particular neighborhood, I
used geolocation to map license address returned by the City of Seattle business
finder. Obviously that does not work as well for Mobile Food Services
(i.e. food trucks) but it still allows for an interesting comparison.
This data is plotted at <a href="http://seattlerestaurantchanges.com">Seattle Restaurant
Changes</a>.</p>

<p>I initially attempted to scrape
data from <a href="https://www.thestranger.com/food-and-drink">The Stranger</a> but
after finding the City of Seattle site I just used
<a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> for the
scraping. I would not have been able to do much more beyond that state
if it had not been for Nathan Yau&rsquo;s excellent tutorial on <a href="http://flowingdata.com/2015/02/19/make-an-interactive-map-with-category-filters/">making maps
with category
filters</a>.
I was able to get a state level shapefile for Washington state from
<a href="http://www.zillow.com/blog/7000-neighborhood-boundary-files-in-shapefile-format-4653/">Zillow</a>
and then reduce that to just Seattle neighborhoods using R&rsquo;s
<a href="http://cran.r-project.org/web/packages/sp/">sp</a> package. Full code
posted on <a href="https://github.com/stedy/seattle-restaurants">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First year on Fitbit]]></title>
    <link href="http://stedy.github.io/blog/2015/02/25/first-year-on-fitbit/"/>
    <updated>2015-02-25T14:15:11-08:00</updated>
    <id>http://stedy.github.io/blog/2015/02/25/first-year-on-fitbit</id>
    <content type="html"><![CDATA[<p>After a year on <a href="https://www.fitbit.com/user/2F49C2">Fitbit</a>, I figured it might be time to take a look at the data that I have been generating. Unfortunately, Fitbit makes you sign up for <a href="https://www.fitbit.com/premium/export">Premium</a> which charges you $50 per year to export your data. Fortunately, Cory Nissen has created an excellent <a href="https://github.com/corynissen/fitbitScraper">R package</a> for doing just this. The package simply uses a POST request handled by Hadley&rsquo;s <a href="https://github.com/hadley/httr">httr</a> library to generate a cookie and then parses the returned JSP results to return a nice <code>data.frame</code>.</p>

<p>Anyways, onto the data.</p>

<p>The first command I tried was the <code>get_15_min_data()</code> for parsing step
data in 15 minute increments. I figured that looking at yesterday&rsquo;s data
would be granular enough to get a good feel for the data.</p>

<p><img src="http://zachstednick.com/fifteen_min_fitbit.png"></p>

<p>I then plotted number of steps taken per day, with a smoothing function
overlaid:</p>

<p><img src="http://zachstednick.com/one_year_fitbit_steps.png"></p>

<p>I had a mean step count of 13935 for the past year. This data is more
interesting to look at as more of an overall trend. There definitely a
seasonal trend in the summer which makes sense. I can also see the
signatures of when I went on a four day backpacking trip in August and
when I broke two ribs and was confined to the couch for four days in
mid-March.</p>

<p>Since I have a Fitbit one, I can also measure floors climbed.</p>

<p><img src="http://zachstednick.com/fitbit_one_year_floors.png"></p>

<p>My mean number of floors climbed is 69.62 which seems absurdly high. My
desk is on the fourth floor of my building and I usually take the stairs
but not sure that is enough to fully explain why these counts are so
high.</p>

<p>Still, it is pretty interesting to look at this data outside of the
Fitbit interface and I would highly recommend checking out Cory&rsquo;s github
<a href="https://github.com/corynissen/fitbitScraper">repo</a></p>

<p>Also, speaking of github, for those of you who regularly follow this
blog (hi, Mom!) I have moved away from making a new gist every time to
simply having a standalone
<a href="https://github.com/stedy/blog-supplemental">repo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offsetting beer by running]]></title>
    <link href="http://stedy.github.io/blog/2015/01/10/offsetting-beer-by-running/"/>
    <updated>2015-01-10T14:24:32-08:00</updated>
    <id>http://stedy.github.io/blog/2015/01/10/offsetting-beer-by-running</id>
    <content type="html"><![CDATA[<p>Last year, among other personal data, I tracked every bar I went to and
every mile I
<a href="http://zachstednick.name/blog/2014/02/06/foursquare-without-a-smartphone/">ran</a>.
Naturally my first question is do I run enough to offset the amount of
beer I am drinking (at bars)?</p>

<p>First we define some units. According to this Runner&rsquo;s World
<a href="http://www.runnersworld.com/tools/calories-burned-calculator">calculator</a>, at 8:45 minute/mile for my
weight I am burning 145 calories. Google says the amount of calories in
a <a href="https://www.google.com/?gws_rd=ssl#q=calories+in+a+pint+of+beer">pint of
beer</a> is about 180. Since I usually average about two beers each time I go to a bar, that simplifies the calculations. Over the course of the year, how often was I above or below the residual? To answer this, I used R and finally got around to trying <a href="https://github.com/hadley/tidyr">tidyr</a> which is pretty slick.</p>

<p><img src="http://zachstednick.com/running_vs_beers.png"></p>

<p>I thougth a lot about how to determine the residual but eventually
settled on calories out - calories in because I felt this method made the best
visualization. As you can see around week 30, I started to run more and
did a better job at offsetting my beer consumption. Obviously this is an
overly simplistic view of my caloric expenditure but shows some of the
interesting insights that can be gained from personal data.</p>

<p>As always, all code and data is in this github
<a href="https://gist.github.com/stedy/9f2ffa58e25cc52dbe2e">gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summarizing books read over time]]></title>
    <link href="http://stedy.github.io/blog/2015/01/04/summarizing-books-read-over-time/"/>
    <updated>2015-01-04T13:54:43-08:00</updated>
    <id>http://stedy.github.io/blog/2015/01/04/summarizing-books-read-over-time</id>
    <content type="html"><![CDATA[<p>I recently read an interesting blog post where the author examined their books rated on Goodreads and summarizing <a href="http://citizen-statistician.org/2014/12/31/annual-review-of-reading/">interesting
trends</a>.
I decided to do a similar analysis even though I use
<a href="https://www.librarything.com/profile/pbirch01">LibraryThing</a>
instead.</p>

<p>LibraryThing has a nice option to allow to to export your data in a
variety of <a href="https://www.librarything.com/export.php">formats</a>. Since I
write R code to parse CSV files everyday I thought I would do something
different and parse a JSON file with python.</p>

<p>I have been on LibraryThing since 2007 and the first question I was
interested in was have my average ratings changed over time? I
calculated the mean for each book by year:</p>

<table>
<thead>
<tr>
<th> Year </th>
<th style="text-align:right;"> Average Rating </th>
</tr>
</thead>
<tbody>
<tr>
<td> 2007 </td>
<td style="text-align:right;"> 3.446809</td>
</tr>
<tr>
<td> 2008 </td>
<td style="text-align:right;"> 3.480000</td>
</tr>
<tr>
<td> 2009 </td>
<td style="text-align:right;"> 3.485294</td>
</tr>
<tr>
<td> 2010 </td>
<td style="text-align:right;"> 3.641509</td>
</tr>
<tr>
<td> 2011 </td>
<td style="text-align:right;"> 3.456522</td>
</tr>
<tr>
<td> 2012 </td>
<td style="text-align:right;"> 3.529412</td>
</tr>
<tr>
<td> 2013 </td>
<td style="text-align:right;"> 3.321429</td>
</tr>
<tr>
<td> 2014 </td>
<td style="text-align:right;"> 3.614583</td>
</tr>
</tbody>
</table>


<p>While uninteresting, this makes a lot of sense - if I am reading a book
that I do not enjoy, I will usually bail on it which tends to bias my
ratings upward. Over time, there have been a few notable
<a href="https://www.librarything.com/work/11691727/reviews/92168929">exceptions</a>.</p>

<p>One of the other interesting analyses in the blog post was examining how the
reviewer&rsquo;s ratings have changed based on the month of the year. I wanted to
make a similar plot using R&rsquo;s
<a href="http://docs.ggplot2.org/current/index.html">ggplot2</a> however since I
was writing this in python I was largely limited to matplotlib.
Fortunately, many people have struggled with this issue and the fine
folks at yhat have ported ggplot2 over to
<a href="https://pypi.python.org/pypi/ggplot">python</a>. With this library I was
able to use <code>geom_smooth</code> to produce the following plot showing rating
trends by week.</p>

<p><img src="http://zachstednick.com/all_years.png"></p>

<p>I tried to figure out why my legend never showed up but I figured that
since most of the trend lines were pretty much the same anyways that the
plot was fine without a legend. It appears that I get in most of my good
reviews early in the year and am harsher later in the year.</p>

<p>The last figure in the blog post compares the writer&rsquo;s review scores to
the Goodreads consensus score. I attempted to
replicate this but ran into more trouble than it was worth to extract
that data from LibraryThing so I abandoned that analysis.</p>

<p>If interested, I put my python code in a GitHub
<a href="https://gist.github.com/stedy/2cb4fb1f332508f39ff2">gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple webstats with R]]></title>
    <link href="http://stedy.github.io/blog/2014/11/19/simple-webstats-with-r/"/>
    <updated>2014-11-19T17:01:34-08:00</updated>
    <id>http://stedy.github.io/blog/2014/11/19/simple-webstats-with-r</id>
    <content type="html"><![CDATA[<p>As someone who puts out writings out publicly, I am naturally curious who (if anyone) is actually reading what I write. To answer this I developed a simple webstat calculator using R. I realize there are many options out there for tracking visits but to paraphrase my friend Andy, <a href="http://wingolog.org/archives/2014/11/14/on-yakshave-on-color-on-cosines-on-glitchen">when has using standard libraries lead to anything cool?</a>.</p>

<p>My main interests in this project is to answer two questions:</p>

<ol>
<li><p>Are people visting this site?</p></li>
<li><p>Where are they visting from?</p></li>
</ol>


<p>I don&rsquo;t really care about things like <a href="https://en.wikipedia.org/wiki/Bounce_rate">bounce rate</a> or type of device used to access the site. Not having to worry about either of these issues helps cut down on the complexity. I run this site on an Apache server and use a standard log output to write my logfile:
<code>LogFormat "%v:%p %h %l %u %t \"%r\" %&gt;s %O \"%{Referer}i\" \"%{User-Agent}i\"</code></p>

<p>I made a small R script that uses <a href="http://cran.r-project.org/web/packages/knitr/">knitr</a> to output plots to HTML for ease in viewing. I wrote a shell script that uses the excellent <a href="http://dirk.eddelbuettel.com/code/littler.html">little r</a> to perform the commands. I run the shell script daily as a cron job and only look back at the past week&rsquo;s worth of data. Since this blog is served on github pages, it can be difficult to see page views so I use images loaded as a proxy.</p>

<p>Here are some example plots of recent visitors:</p>

<p><img src="http://zachstednick.com/visitor.png"></p>

<p>And then another plot of visitor locations:</p>

<p><img src="http://zachstednick.com/referrer_location.png"></p>

<p>That outlier from Brazil is likely a Google bot crawling the site; better detection and removal of bot traffic from the final output is on the TODO list. All of the code (minus the shell script) lives on <a href="https://github.com/stedy/simple-webstats">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(206)419-PARKS]]></title>
    <link href="http://stedy.github.io/blog/2014/11/05/206-419-parks/"/>
    <updated>2014-11-05T15:27:00-08:00</updated>
    <id>http://stedy.github.io/blog/2014/11/05/206-419-parks</id>
    <content type="html"><![CDATA[<p>I recently became aware of the efforts of Linnea Westerlind who made a
goal to visit every park in Seattle and documented her efforts
<a href="http://www.yearofseattleparks.com/">here</a>. I thought this was pretty
neat so I looked up the list of <a href="http://www.seattle.gov/parks/listall.asp">City of Seattle
Parks</a> which currently lists
419 parks. The definitions for a park are hard to determine and this
list ends up with some oddball parks such as <a href="https://www.google.com/maps/place/Crescent+Place/@47.6842435,-122.3330848,19z/data=!4m2!3m1!1s0x54901413dd56bf9f:0xa19ed07208659a24">Crescent
Place</a>.
Still I think it is an interesting way to learn more about where you live
wherever that may be. I have currently visited 118/419  parkswhich is
about 28%, not bad. Not
sure if I will be able to reach them faster than the 4 years it took
Westerlind but maybe I should just focus on the journey instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGO price estimates over time]]></title>
    <link href="http://stedy.github.io/blog/2014/08/30/lego-price-estimates-over-time/"/>
    <updated>2014-08-30T16:22:00-07:00</updated>
    <id>http://stedy.github.io/blog/2014/08/30/lego-price-estimates-over-time</id>
    <content type="html"><![CDATA[<p>LEGO recently introduced a new LEGO set called <a href="http://shop.lego.com/en-US/Research-Institute-21110">Research
Institute</a> which
featured three female scientists. Since my wife is also a female
scientist, I tried to order one from the LEGO website only to learn that
they had sold out in less than a day. I then wrote an email complaining
about this to LEGO who responded by sending me an apology note and a
catalog.</p>

<p>I grew up playing with LEGO sets, hard to avoid when you were named Zach
and commercials like
<a href="https://www.youtube.com/watch?v=pDH3AoOQzE0">this</a> dominated the
airwaves. Anyways, when I was a kid my dad once mentioned to me that a good rule of thumb
for determining the price of a LEGO set was to estimate each brick
costing about 10 cents. This new catalog made me wonder if this was still
true. I copied all the model numbers as well as the number of pieces and
the prices. I was also curious in how true this trend was when adjusted
for inflation so I used the CPI Inflation calculator from <a href="http://data.bls.gov/cgi-bin/cpicalc.pl?cost1=.10&amp;year1=1989&amp;year2=2014">US Bureau of
Labor
Statistics</a> which showed
that $0.10 in 1989 had the same buying power as $0.19 in 2014. Ideally I
could have found a catalog from 1989 but I don&rsquo;t remember any back then
and I probably would have cut it up to put pictures in my locker or
something like that. I used R
to plot both of these trends and it appears that my dad&rsquo;s estimate still
holds true for 2014.</p>

<p><img src="http://zachstednick.com/lego_by_year.png"></p>

<p>A correlation calculation for all sets gives a value of 0.91 which means my dad had a
pretty good estimate back in the day.</p>

<p>I also looked at the average price for each collection and found that
almost all collections retained a high correlation between the estimated
price and the actual price.</p>

<table>
<thead>
<tr>
<th> Collection </th>
<th> Collection Mean Price </th>
<th style="text-align:right;"> Collection Correlation </th>
</tr>
</thead>
<tbody>
<tr>
<td> Basics </td>
<td> 29.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Chima </td>
<td> 38.99 </td>
<td style="text-align:right;"> 0.977</td>
</tr>
<tr>
<td> City </td>
<td> 54.365 </td>
<td style="text-align:right;"> 0.896</td>
</tr>
<tr>
<td> Creator </td>
<td> 100.375 </td>
<td style="text-align:right;"> 0.955</td>
</tr>
<tr>
<td> DC Superheroes </td>
<td> 76.657 </td>
<td style="text-align:right;"> 1</td>
</tr>
<tr>
<td> Disney Princess </td>
<td> 27.657 </td>
<td style="text-align:right;"> 0.963</td>
</tr>
<tr>
<td> Exclusive </td>
<td> 149.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Friends </td>
<td> 23.354 </td>
<td style="text-align:right;"> 0.992</td>
</tr>
<tr>
<td> Ideas </td>
<td> 49.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Juniors </td>
<td> 27.49 </td>
<td style="text-align:right;"> 0.901</td>
</tr>
<tr>
<td> LEGO Movie </td>
<td> 63.99 </td>
<td style="text-align:right;"> 0.997</td>
</tr>
<tr>
<td> Marvel Superheroes </td>
<td> 40.99 </td>
<td style="text-align:right;"> 0.934</td>
</tr>
<tr>
<td> Mindstorms </td>
<td> 349.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Minecraft </td>
<td> 139.96 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Mixels </td>
<td> 4.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Ninjago </td>
<td> 47.434 </td>
<td style="text-align:right;"> 0.976</td>
</tr>
<tr>
<td> Simpsons </td>
<td> 199.99 </td>
<td style="text-align:right;"> NA</td>
</tr>
<tr>
<td> Star Wars </td>
<td> 133.365 </td>
<td style="text-align:right;"> 0.979</td>
</tr>
<tr>
<td> Technic </td>
<td> 81.99 </td>
<td style="text-align:right;"> 0.989</td>
</tr>
<tr>
<td> Ultra Agents </td>
<td> 45.323 </td>
<td style="text-align:right;"> 0.983</td>
</tr>
</tbody>
</table>


<p>Raw data and code for this lives at this
<a href="https://gist.github.com/stedy/92b949ba44effd66c855">gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datasets for Machine Learning with R by Lantz]]></title>
    <link href="http://stedy.github.io/blog/2014/08/19/datasets-for-machine-learning-with-r-by-lantz/"/>
    <updated>2014-08-19T15:31:00-07:00</updated>
    <id>http://stedy.github.io/blog/2014/08/19/datasets-for-machine-learning-with-r-by-lantz</id>
    <content type="html"><![CDATA[<p>I recently read <a href="https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-r">Machine Learning with
R</a>
by Brett Lantz. This is a book that provides an introduction to machine
learning using R. I really enjoyed the book and thought Lantz did an
excellent job explaining the content as well as providing many good
references and examples, which is what lead to my problem with the book.
As far as I can tell, Packt Publishing does not make its datasets
available online unless you buy the book and create a <a href="https://www.packtpub.com/books/content/support">user
account</a> which can be a
problem if you are checking the book out from the library or borrowing
the book from a friend. All of these datasets
are in the public domain but simply needed some cleaning up and
recoding to match the format in the book so I went ahead and made a
<a href="https://github.com/stedy/Machine-Learning-with-R-datasets">github repo</a>
to host them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of gas efficiency by brand]]></title>
    <link href="http://stedy.github.io/blog/2014/07/31/analysis-of-gas-efficiency-by-brand/"/>
    <updated>2014-07-31T17:46:00-07:00</updated>
    <id>http://stedy.github.io/blog/2014/07/31/analysis-of-gas-efficiency-by-brand</id>
    <content type="html"><![CDATA[<p>I have recorded every trip to the gas station so far in 2014 and finally
got around to analyzing the first seven months. I currently drive a <a href="https://s3.amazonaws.com/images.thecarconnection.com/sml/honda_100227510_s.jpg">2010
Honda Fit</a>
and bought only 87 grade gas for the duration of this study.</p>

<p>I was initially interested in how far can I travel per dollar, which can easily be
calculated:</p>

<p>A first attempt yields the following table:</p>

<table>
<thead>
<tr>
<th> Brand </th>
<th style="text-align:right;"> meancost </th>
</tr>
</thead>
<tbody>
<tr>
<td> 7-11 (Citgo) </td>
<td style="text-align:right;"> 7.858</td>
</tr>
<tr>
<td> 76 </td>
<td style="text-align:right;"> 7.123</td>
</tr>
<tr>
<td> Arco </td>
<td style="text-align:right;"> 8.451</td>
</tr>
<tr>
<td> Chevron </td>
<td style="text-align:right;"> 8.704</td>
</tr>
<tr>
<td> Costco  </td>
<td style="text-align:right;"> 9.593</td>
</tr>
<tr>
<td> Safeway </td>
<td style="text-align:right;"> 7.791</td>
</tr>
<tr>
<td> Shell </td>
<td style="text-align:right;"> 7.597</td>
</tr>
</tbody>
</table>


<p>Far and away Costco and Chevron have the best mean cost, but they
each have only one datapoint and the Costco was located in Marysville,
WA while the Chevron was located in Sherwood, OR which means that both
of
these were largely composed of highway miles and therefore higher fuel
efficiency. I
initially tried to account for highway miles versus city miles but have
not had much success so far.</p>

<p>I then looked at MPG by gas station:</p>

<table>
<thead>
<tr>
<th> Brand </th>
<th style="text-align:right;"> meanMPG </th>
</tr>
</thead>
<tbody>
<tr>
<td> 7-11 (Citgo) </td>
<td style="text-align:right;"> 29.07</td>
</tr>
<tr>
<td> 76 </td>
<td style="text-align:right;"> 26.96</td>
</tr>
<tr>
<td> Arco </td>
<td style="text-align:right;"> 29.88</td>
</tr>
<tr>
<td> Chevron </td>
<td style="text-align:right;"> 34.80</td>
</tr>
<tr>
<td> Costco </td>
<td style="text-align:right;"> 30.50</td>
</tr>
</tbody>
</table>


<p>Finally, I plotted MPG against mean cost.</p>

<p><img src="http://zachstednick.com/gas_mpg.png"></p>

<p>Since (for now) we are ignoring Costco and Chevron, it appears that
Safeway is best for
lowest cost with highest mean MPG. I wonder if the <a href="http://www.cockeyed.com/pranks/safeway/ultimate_shopper.html">Safeway ultimate
shopper</a>
guy is still around?</p>

<p>Data and code at this
<a href="https://gist.github.com/stedy/a198bb0c7b010dcdf7af">gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a twitter bot for fun and profit]]></title>
    <link href="http://stedy.github.io/blog/2014/02/24/writing-a-twitter-bot-for-fun-and-profit/"/>
    <updated>2014-02-24T21:42:00-08:00</updated>
    <id>http://stedy.github.io/blog/2014/02/24/writing-a-twitter-bot-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>One of my first thoughts when Twitter had its IPO was that the days of
writing Twitter bots was over. My fear was that they would lock down
their
platform in order to more accurately sell ads.</p>

<p>Man, was I wrong.</p>

<p>The Twitter API is still as robust as ever and allows for creating Twitter bots.
One of the current trends is to try to generate buzz around a product or
idea by getting people to use a specific hashtag. This can often lead to
slightly hilarious results, such as the <a href="http://mlb.mlb.com/mlb/awards/y2014/faceofmlb/">Face of
MLB</a>. Basically, the
fans &ldquo;vote&rdquo; for their favorite player to be the Face of MLB by using a
certain hashtag. I cannot think of a better job for a twitter bot.</p>

<p>Setting up a bot or Twitter Application is easy, just go to
<a href="http://apps.twitter.com">Twitter Apps</a> and login or create a new username and
log in. Follow the steps and you can get an API key in a few minutes. Although note that in order to write tweets as a bot you have to
choose Read + Write (instead of the default Write). I run my bot largely using the
<a href="https://pypi.python.org/pypi/tweepy/2.2">tweepy</a> Python library which
provides easy access to the Twitter API. Here is a
<a href="https://gist.github.com/stedy/9203520">gist</a> of a bot I am
running for the Face of MLB. Twitter does not allow the same tweet to be
posted more than once from an account so I just add something like the
current time:</p>

<blockquote class="twitter-tweet" lang="en"><p><a
href="https://twitter.com/_J4EZ">@_j4ez</a> Why not Zoidberg? the time
is Monday, 09:09:PM <a
href="https://twitter.com/search?q=%23ericsogard&amp;src=hash">#ericsogard</a>
<a href="https://twitter.com/search?q=%23FaceofMLB&amp;src=hash">#FaceofMLB</a></p>&mdash;
Zoidberg bot (@ZoidbergBot) <a href="https://twitter.com/ZoidbergBot/statuses/438179021684097024">February
25, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js"
charset="utf-8"></script>


<p>I will admit this is kinda silly, but if I can&rsquo;t use my programming
skills to get
someone like <a href="http://oakland.athletics.mlb.com/team/player.jsp?player_id=519299#gameType=%27R%27">Eric
Sogard</a>
elected the Face of MLB, then what&rsquo;s the point of programming?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Foursquare without a smartphone]]></title>
    <link href="http://stedy.github.io/blog/2014/02/06/foursquare-without-a-smartphone/"/>
    <updated>2014-02-06T22:10:00-08:00</updated>
    <id>http://stedy.github.io/blog/2014/02/06/foursquare-without-a-smartphone</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t have a smartphone. Because of this,
I am apparently missing out on sweet checkin
<a href="https://foursquare.com/stevewoz/checkin/52f4182911d23311d6d12c6d?s=O5DyXc1-s3wjItCncf6KlvDtyxc&amp;ref=tw">badges</a>
that I could be displaying on a user
profile on fourquare or somewhere similar. This, in addition to how
amazed I am by the <a href="http://feltron.com/ar12_01.html">Feltron
annual report</a> does make slightly
envious of people with abilities to easily track daily events. Instead
of getting a smartphone, I opted for a much more low
tech solution.</p>

<p><img src="http://zachstednick.com/calendar.jpg"></p>

<p>This is a picture of any bars, restaurants or events I
went to in the month of January. I am also
trying to record how often I work out and what kind of workout I am
doing. Its been interesting thus far to try and observe trends and
determine if I can gain any insight. I can definitely see why people are
interested in using a device like a fitbit and or a smartphone for
tracking. Until that day, I think I will
just stick to using pen on a calendar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on solving my first 100 problems on Project Euler]]></title>
    <link href="http://stedy.github.io/blog/2013/11/17/thoughts-on-solving-my-first-100-problems-on-project-euler/"/>
    <updated>2013-11-17T18:40:00-08:00</updated>
    <id>http://stedy.github.io/blog/2013/11/17/thoughts-on-solving-my-first-100-problems-on-project-euler</id>
    <content type="html"><![CDATA[<p>Finally!</p>

<p><img src="http://projecteuler.net/profile/zachs.png"></p>

<p>A few years ago I set a goal to solve 100 problems on <a href="http://www.projecteuler.net">Project
Euler</a> with python. My motivation was to learn as much
about problem solving as I could and ultimately finish with <a href="http://projecteuler.net/problem=96">Problem
96</a>, a sudoku solver. My plan was to
write about my progess in a <a href="http://zerotosudoku.blogspot.com/">blog</a>.
More than three years later, I finally finished that goal (although I
quickly abandoned that blog after starting it). The problems definitely got harder
and it took me a while to get motivated to work on them as well as to
solve them.  I did however come up with three major lessons learned in
my first 100 problems:</p>

<p>1 - <strong>Narrow the search space</strong>
By far the biggest lesson I learned was how to cut down on possible
options before even starting to program. Since one of the rules of
Project Euler is to solve each problem within a minute, brute force
quickly gets thrown out the window. An example would be taking the
square root of the upper bound to reduce the amount of searching of
numbers above the square root. I learned to think more in depth about
the problem and try to optimize the search window to be more effiecient.</p>

<p>2 - <strong>Have a toolbox and use it</strong>
I quickly developed a set of functions that I imported frequently that
included functions such as a prime number sieve, a function to check if
a number was pandigital, and a function for getting all factors of a
number. I found that the way the problems were structured meant that I
was frequently coming back to issues or approaches I used on earlier
problems and I did not want to have to rewrite functions i had
previously used.</p>

<p>3 - <strong>Google and Stack Overflow are your friends</strong>
I used both frequently, there are many other people who post their
answers or even just the
<a href="https://code.google.com/p/projecteuler-solutions/">solutions</a>. You can
use these if you want, but I found I was able to learn about libraries such as
itertools, differences between python&rsquo;s <code>range()</code> vs. <code>xrange()</code> and
many different types of search algorithms.</p>

<p>I would highly encourage you to try out a few problems on <a href="https://www.projecteuler.net">Project
Euler</a>, I had fun and learned way more
python than I thought I would (even if it took me a few years longer than
originally planned.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hard Rules]]></title>
    <link href="http://stedy.github.io/blog/2013/08/21/hard-rules/"/>
    <updated>2013-08-21T21:39:00-07:00</updated>
    <id>http://stedy.github.io/blog/2013/08/21/hard-rules</id>
    <content type="html"><![CDATA[<p>I have been thinking a lot about this <a href="http://sebastianmarshall.com/hard-rules">blog
post</a> and in many ways I have
to agree what the author is saying.  The internet can be a distracting
<a href="http://www.ashersarlin.com/archives/2004/09/honestly_who_co.php">place</a>
and making rules for yourself can help you stay focused and help
maintain your energy levels.  Here are some of mine:</p>

<ul>
<li>Check Sports Illustrated only twice a day - around 10:30 AM and 2:30 PM</li>
<li>No reddit at work</li>
<li><a href="http://news.ycombinator.org">Hacker News</a> once a day in the evening</li>
<li>LinkedIn at most once a week</li>
<li>Check and respond to personal email only from noon - 1 PM while at
work</li>
<li>No computer after 11 PM</li>
</ul>


<p>For me, each of these were challenging to implement and I had to use browser extensions such as
  <a href="https://addons.mozilla.org/en-US/firefox/addon/leechblock/">Leechblock</a>
or
<a href="https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji">StayFocusd</a>.
Now, with these hard rules in place I don&rsquo;t have to debate whether I
should go to a certain site or feel guilty while on that site.  Instead,
I can put that energy either into work or simply getting off the
computer faster - both of which are well worth the initial challenges of
hard rules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of The Listserve emails]]></title>
    <link href="http://stedy.github.io/blog/2013/04/14/analysis-of-the-listserve-emails/"/>
    <updated>2013-04-14T20:23:00-07:00</updated>
    <id>http://stedy.github.io/blog/2013/04/14/analysis-of-the-listserve-emails</id>
    <content type="html"><![CDATA[<p><a href="http://www.thelistserve.com">The Listserve</a> is an email lottery, you sign up and once a day someone
gets a chance to send the entire list an email.  My previous
<a href="http://zachstednick.name/blog/2013/04/14/text-mining-the-listserve-emails/">post</a>
covered how I fetched these emails, this post will discuss the actual
statistics obtained from The Listserve emails.</p>

<h1>To:</h1>

<p>The Listserve website mentions the countries of subscribers but thats
about it.  As of today, there are currently 21,402 subscribers.  I
fetched all the archival data I could from Internet Archive and looked
at enrollment over time which has stayed consistent around 20,000.  I
also plotted
enrollment over <a href="http://zachstednick.com/enrollment.html">time</a>.</p>

<h1>From:</h1>

<p>The Listserve allows you to use any name you want as the sender of the email, here are the ones that occurred more than once:</p>

<table>
<thead>
<tr>
<th> Name </th>
<th style="text-align:right;"> Occurrence </th>
</tr>
</thead>
<tbody>
<tr>
<td> Anonymous </td>
<td style="text-align:right;"> 12</td>
</tr>
<tr>
<td> Laura </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> The Listserve </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> Ben </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> Beth </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> David </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> Sam </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> Michelle Huang </td>
<td style="text-align:right;"> 2</td>
</tr>
<tr>
<td> T. </td>
<td style="text-align:right;"> 2</td>
</tr>
</tbody>
</table>


<p>Interesting that Michelle Huang had two entries, what happens if we look at first name only?</p>

<table>
<thead>
<tr>
<th> Name </th>
<th style="text-align:right;"> Occurrence </th>
</tr>
</thead>
<tbody>
<tr>
<td> Anonymous </td>
<td style="text-align:right;"> 12</td>
</tr>
<tr>
<td> Chris </td>
<td style="text-align:right;"> 8</td>
</tr>
<tr>
<td> David </td>
<td style="text-align:right;"> 7</td>
</tr>
<tr>
<td> Jordan </td>
<td style="text-align:right;"> 4</td>
</tr>
<tr>
<td> Michelle </td>
<td style="text-align:right;"> 4</td>
</tr>
<tr>
<td> Alex </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> Andy </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> Ben </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> Brian </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> Daniel </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> James </td>
<td style="text-align:right;"> 3</td>
</tr>
<tr>
<td> Laura </td>
<td style="text-align:right;"> 3</td>
</tr>
</tbody>
</table>


<p>What about time of day sent?</p>

<p>I took all the timestamps from the emails and plotted when they were
sent based on GMT.  This was more due to personal curiosity but
interesting nonetheless.  The red line in the plot is the mean time
which ended up being 17:19:15 GMT.  Those large drops are likely due to
some nuances in email dates.  For example, I got two emails on 23 June
2012 and none on 22 June.</p>

<p><img src="http://zachstednick.com/arrivaltimes.png"></p>

<h1>Subject:</h1>

<p>I took all the subject lines and created a word frequency table on how
often that word occurred:</p>

<table>
<thead>
<tr>
<th> Word </th>
<th style="text-align:right;"> Occurrence </th>
</tr>
</thead>
<tbody>
<tr>
<td> life </td>
<td style="text-align:right;"> 9</td>
</tr>
<tr>
<td> world </td>
<td style="text-align:right;"> 9</td>
</tr>
<tr>
<td> day </td>
<td style="text-align:right;"> 8</td>
</tr>
<tr>
<td> little </td>
<td style="text-align:right;"> 8</td>
</tr>
<tr>
<td> love </td>
<td style="text-align:right;"> 7</td>
</tr>
<tr>
<td> story </td>
<td style="text-align:right;"> 7</td>
</tr>
<tr>
<td> advice </td>
<td style="text-align:right;"> 6</td>
</tr>
<tr>
<td> time </td>
<td style="text-align:right;"> 6</td>
</tr>
</tbody>
</table>


<h1>Body:</h1>

<p>For the body of the email I created a <a href="http://en.wikipedia.org/wiki/Document-term_matrix">Term-Document Matrix</a> which is a matrix that describes the frequency of words and how often they occur together.  This allows themes and trends of the body of work or corpus, which in this case happens to be The Listserve emails.  I took all the emails and removed punctuation and stop words such as &ldquo;and&rdquo; or &ldquo;but&rdquo; and made a matrix based on how often the most common words occured together.  I then created a dendrogram of all the words and how they clustered with each other.</p>

<p><img src="http://zachstednick.com/dendrogram.png"></p>

<p>The majority of the words are pretty evenly clustered and its difficult
to determine any trends.  However there is a cluster on the far left
side of the tree which I zoomed in on:</p>

<p><img src="http://zachstednick.com/zoomin.png"></p>

<p>This cluster includes word pairs such as &ldquo;email&rdquo; and &ldquo;listserve&rdquo;, &ldquo;love&rdquo; and &ldquo;time&rdquo;, and &ldquo;life&rdquo; and &ldquo;people&rdquo;.  While its not surprising to see these words occurring so often together, it is interesting to see that a majority of people use this email to dispense wisdom or advice to the masses.</p>

<p>I have not yet been selected for The Listserve but I am sure these
findings here will strongly influence what I write.  In the meantime,
I want to learn more about text processing since I found it pretty interesting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text mining The Listserve Emails]]></title>
    <link href="http://stedy.github.io/blog/2013/04/14/text-mining-the-listserve-emails/"/>
    <updated>2013-04-14T18:21:00-07:00</updated>
    <id>http://stedy.github.io/blog/2013/04/14/text-mining-the-listserve-emails</id>
    <content type="html"><![CDATA[<p><a href="http://www.thelistserve.com">The Listserve</a> is an email list where
people sign up for a chance to send an email out to the entire list to
discuss whatever they want.  Currently the number of people enrolled is
about 20,000 and there has been one email per day since 16 April 2012.
I thought that since this project has been running for about a year, it
would be a nice opportunity to learn a little more about text mining.</p>

<p>In this first part I will discuss how I fetched all those emails and
parsed them and in a second blog post I will talk about what I found.</p>

<p>The first issue was how to get the emails off the server and after
trying a few solutions I finally ended up using the Python
<a href="http://docs.python.org/2/library/imaplib.html">imaplib</a> which is a
Python library for connecting with an IMAP4 email server which is used
by all the major providers such as Yahoo and Google.  After connecting I
used the Python <a href="http://docs.python.org/2/library/email.html">email</a> library which helped facilitate selecting certain parts of the email.  I relied
heavily on the function <code>email.message_from_string()</code> to fetch email
attributes such as Message-ID or Sender.  I took all these emails and
dumped them into a SQLite database to later parse with
<a href="http://cran.r-project.org">R</a>.</p>

<p>I use R almost daily for work so it was nice to tackle this part of the
project with tools I knew pretty well.  I used <code>sapply()</code> and
<code>strsplit()</code> mostly to parse out parts of various email attributes and
then used the <a href="http://cran.r-project.org/web/packages/tm/index.html">tm</a>
package to handle all of the text processing.  The tm package makes it
easier to get all the emails into a term document matrix which is much
easier to work with a large corpus of text such as this.  I used an
English dictonary with the tm package to remove stop words and for
stemming (reducing the word to its base form).  There have been two
emails so far in Portuguese but the rest are all in English.</p>

<p>Initially I thought I could track all the emails by date but this proved
to be a difficult task due to the nuances of email and when they
actually got sent off the server.  Instead I ended up using the
Message-ID for making sure that I did not duplicate emails in the
analysis.</p>

<p>I put up all the source code on a github
<a href="https://github.com/stedy/thelistserve-stats">repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[insert cat picture]]></title>
    <link href="http://stedy.github.io/blog/2013/02/27/insert-cat-picture/"/>
    <updated>2013-02-27T10:26:00-08:00</updated>
    <id>http://stedy.github.io/blog/2013/02/27/insert-cat-picture</id>
    <content type="html"><![CDATA[<p>My wife and sometimes other people ask me to send them research papers
that are not publicly available which I am more than happy to do.
However, why should I not have some fun with the final document I send
her.  I use the excellent, although sadly deprecated
<a href="http://pybrary.net/pyPdf/">PyPdf</a>.  I have not checked out pyPdf2 but
it does look promising.  Here is the
<a href="https://gist.github.com/stedy/5050018">gist</a> for how I randomly add an
image (usually of a cat) to the pdf document and then rename it since
most research sites name their documents similar to the DOI for the
paper.</p>
]]></content>
  </entry>
  
</feed>
